#!/bin/bash

# 프로젝트 설정 자동화 스크립트
# 각 사용자가 자신의 프로젝트 ID로 설정할 수 있도록 지원

set -e

# 색상 코드
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}===============================================${NC}"
echo -e "${GREEN}    Senior MHealth 프로젝트 설정 스크립트${NC}"
echo -e "${GREEN}===============================================${NC}"

# 1. 프로젝트 ID 입력 받기
if [ -z "$GCP_PROJECT_ID" ]; then
    echo -e "\n${YELLOW}Google Cloud 프로젝트 ID를 입력하세요:${NC}"
    read -p "Project ID: " GCP_PROJECT_ID
fi

# 2. 프로젝트 번호 가져오기
echo -e "\n${YELLOW}프로젝트 정보 확인 중...${NC}"
GCP_PROJECT_NUMBER=$(gcloud projects describe $GCP_PROJECT_ID --format="value(projectNumber)" 2>/dev/null || echo "")

if [ -z "$GCP_PROJECT_NUMBER" ]; then
    echo -e "${RED}프로젝트를 찾을 수 없습니다. 프로젝트 ID를 확인하세요.${NC}"
    exit 1
fi

# 3. 리전 설정
DEFAULT_REGION="asia-northeast3"
echo -e "\n${YELLOW}배포 리전을 선택하세요 (기본값: $DEFAULT_REGION):${NC}"
echo "1) asia-northeast3 (서울)"
echo "2) us-central1 (미국 중부)"
echo "3) europe-west1 (벨기에)"
echo "4) 직접 입력"
read -p "선택 [1-4]: " region_choice

case $region_choice in
    2) GCP_REGION="us-central1" ;;
    3) GCP_REGION="europe-west1" ;;
    4)
        read -p "리전 입력: " GCP_REGION
        ;;
    *) GCP_REGION=$DEFAULT_REGION ;;
esac

# 4. .env 파일 생성
echo -e "\n${YELLOW}.env 파일 생성 중...${NC}"

cat > .env << EOF
# ====================================
# Generated by setup-project.sh
# Project: $GCP_PROJECT_ID
# Generated at: $(date)
# ====================================

# === GCP Project Configuration ===
GCP_PROJECT_ID=$GCP_PROJECT_ID
GCP_PROJECT_NUMBER=$GCP_PROJECT_NUMBER
GCP_REGION=$GCP_REGION

# === Firebase Configuration ===
FIREBASE_PROJECT_ID=$GCP_PROJECT_ID
FIREBASE_AUTH_DOMAIN=${GCP_PROJECT_ID}.firebaseapp.com
FIREBASE_STORAGE_BUCKET=${GCP_PROJECT_ID}.firebasestorage.app
FIREBASE_MESSAGING_SENDER_ID=$GCP_PROJECT_NUMBER

# === Service Names ===
SERVICE_NAME=ai-service-simple
API_SERVICE_NAME=api-service

# === Storage ===
STORAGE_BUCKET=${GCP_PROJECT_ID}.appspot.com

# === Database Configuration ===
BIGQUERY_DATASET=senior_mhealth_analytics
BIGQUERY_LOCATION=$GCP_REGION

# === Environment ===
ENVIRONMENT=development
LOG_LEVEL=INFO
EOF

echo -e "${GREEN}✅ .env 파일이 생성되었습니다.${NC}"

# 5. API 키 설정 안내
echo -e "\n${YELLOW}=== API 키 설정 안내 ===${NC}"
echo "다음 API 키들을 .env 파일에 직접 추가해주세요:"
echo ""
echo "GEMINI_API_KEY=your-gemini-api-key"
echo "OPENAI_API_KEY=your-openai-api-key (선택사항)"
echo "FIREBASE_API_KEY=your-firebase-api-key"
echo ""
echo "API 키 생성 방법:"
echo "- Gemini API: https://makersuite.google.com/app/apikey"
echo "- Firebase: Firebase Console > 프로젝트 설정 > 일반"

# 6. 프로젝트 설정
echo -e "\n${YELLOW}Google Cloud 프로젝트 설정 중...${NC}"

# 현재 프로젝트 설정
gcloud config set project $GCP_PROJECT_ID

# 필요한 API 활성화
echo -e "\n${YELLOW}필요한 API 활성화 중...${NC}"
apis=(
    "run.googleapis.com"
    "cloudbuild.googleapis.com"
    "containerregistry.googleapis.com"
    "firestore.googleapis.com"
    "storage-component.googleapis.com"
    "bigquery.googleapis.com"
)

for api in "${apis[@]}"; do
    echo "Enabling $api..."
    gcloud services enable $api --quiet || true
done

# 7. Firebase 초기화 확인
echo -e "\n${YELLOW}Firebase 프로젝트 초기화...${NC}"
if command -v firebase &> /dev/null; then
    firebase use $GCP_PROJECT_ID || firebase use --add $GCP_PROJECT_ID
else
    echo -e "${YELLOW}Firebase CLI가 설치되지 않았습니다.${NC}"
    echo "설치: npm install -g firebase-tools"
fi

# 8. 완료
echo -e "\n${GREEN}===============================================${NC}"
echo -e "${GREEN}✅ 프로젝트 설정이 완료되었습니다!${NC}"
echo -e "${GREEN}===============================================${NC}"
echo ""
echo "프로젝트 ID: $GCP_PROJECT_ID"
echo "프로젝트 번호: $GCP_PROJECT_NUMBER"
echo "리전: $GCP_REGION"
echo ""
echo "다음 단계:"
echo "1. .env 파일에 API 키 추가"
echo "2. cd backend/ai-service-simple && ./deploy.sh"
echo "3. cd frontend/web && npm install && npm run dev"